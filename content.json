{"meta":{"title":"Small_BaoZi","subtitle":null,"description":"一只可爱的包子！","author":"Small_BaoZi","url":"localhost:4000/blog","root":"/blog/"},"pages":[{"title":"bangumi","date":"2019-02-10T13:32:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"bangumi/index.html","permalink":"bangumi/index.html","excerpt":"","text":""},{"title":"client","date":"2018-12-20T15:13:35.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"client/index.html","permalink":"client/index.html","excerpt":"","text":"直接下载 or 扫码下载："},{"title":"comment","date":"2018-12-20T15:13:48.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"comment/index.html","permalink":"comment/index.html","excerpt":"","text":"念两句诗 叙别梦、扬州一觉。 【宋代】吴文英《夜游宫·人去西楼雁杳》"},{"title":"about","date":"2018-12-12T14:14:36.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"about/index.html","permalink":"about/index.html","excerpt":"","text":"[さくら荘のhojun] 与&nbsp; Mashiro&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"music","date":"2018-12-20T15:14:28.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"music/index.html","permalink":"music/index.html","excerpt":"","text":""},{"title":"lab","date":"2019-01-05T13:47:59.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"lab/index.html","permalink":"lab/index.html","excerpt":"","text":"sakura主题balabala"},{"title":"links","date":"2018-12-19T15:11:06.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"links/index.html","permalink":"links/index.html","excerpt":"","text":""},{"title":"donate","date":"2018-12-20T15:13:05.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"donate/index.html","permalink":"donate/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-12-12T14:14:16.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"tags/index.html","permalink":"tags/index.html","excerpt":"","text":""},{"title":"rss","date":"2018-12-20T15:09:03.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"rss/index.html","permalink":"rss/index.html","excerpt":"","text":""},{"title":"theme-sakura","date":"2019-01-04T14:53:25.000Z","updated":"2021-09-13T06:29:01.845Z","comments":false,"path":"theme-sakura/index.html","permalink":"theme-sakura/index.html","excerpt":"","text":"Hexo主题Sakura修改自WordPress主题Sakura，感谢原作者Mashiro"},{"title":"video","date":"2018-12-20T15:14:38.000Z","updated":"2020-03-16T10:41:30.000Z","comments":false,"path":"video/index.html","permalink":"video/index.html","excerpt":"","text":"var videos = [ { img: 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '放送时间: 2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' }, { img : 'https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg', title: '朝花夕誓——于离别之朝束起约定之花', status: '已追完', progress: 100, jp: 'さよならの朝に約束の花をかざろう', time: '2018-02-24 SUN.', desc: ' 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。' } ] .should-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:95%;}.should-ellipsis-full{overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:100%;}.should-ellipsis i{position:absolute;right:24px;}.grey-text{color:#9e9e9e !important}.grey-text.text-darken-4{color:#212121 !important}html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}img{border-style:none}progress{display:inline-block;vertical-align:baseline}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{-webkit-box-sizing:border-box;box-sizing:border-box}*,*:before,*:after{-webkit-box-sizing:inherit;box-sizing:inherit}ul:not(.browser-default){padding-left:0;list-style-type:none}ul:not(.browser-default)>li{list-style-type:none}.card{-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);box-shadow:0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2)}.hoverable{-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s}.hoverable:hover{-webkit-box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);box-shadow:0 8px 17px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19)}i{line-height:inherit}i.right{float:right;margin-left:15px}.bangumi .right{float:right !important}.material-icons{text-rendering:optimizeLegibility;-webkit-font-feature-settings:'liga';-moz-font-feature-settings:'liga';font-feature-settings:'liga'}.row{margin-left:auto;margin-right:auto;margin-bottom:20px}.row:after{content:\"\";display:table;clear:both}.row .col{float:left;-webkit-box-sizing:border-box;box-sizing:border-box;padding:0 .75rem;min-height:1px}.row .col.s12{width:100%;margin-left:auto;left:auto;right:auto}@media only screen and (min-width:601px){.row .col.m6{width:50%;margin-left:auto;left:auto;right:auto}}html{line-height:1.5;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;font-weight:normal;color:rgba(0,0,0,0.87)}@media only screen and (min-width:0){html{font-size:14px}}@media only screen and (min-width:992px){html{font-size:14.5px}}@media only screen and (min-width:1200px){html{font-size:15px}}.card{position:relative;margin:.5rem 0 1rem 0;background-color:#fff;-webkit-transition:-webkit-box-shadow .25s;transition:-webkit-box-shadow .25s;transition:box-shadow .25s;transition:box-shadow .25s,-webkit-box-shadow .25s;border-radius:2px}.card .card-title{font-size:24px;font-weight:300}.card .card-title.activator{cursor:pointer}.card .card-image{position:relative}.card .card-image img{display:block;border-radius:2px 2px 0 0;position:relative;left:0;right:0;top:0;bottom:0;width:100%}.card .card-content{padding:24px;border-radius:0 0 2px 2px}.card .card-content p{margin:0}.card .card-content .card-title{display:block;line-height:32px;margin-bottom:8px}.card .card-content .card-title i{line-height:32px}.card .card-reveal{padding:24px;position:absolute;background-color:#fff;width:100%;overflow-y:auto;left:0;top:100%;height:100%;z-index:3;display:none}.card .card-reveal .card-title{cursor:pointer;display:block}.waves-effect{position:relative;cursor:pointer;display:inline-block;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-tap-highlight-color:transparent;vertical-align:middle;z-index:1;-webkit-transition:.3s ease-out;transition:.3s ease-out}.waves-effect img{position:relative;z-index:-1}.waves-block{display:block}::-webkit-input-placeholder{color:#d1d1d1}::-moz-placeholder{color:#d1d1d1}:-ms-input-placeholder{color:#d1d1d1}::-ms-input-placeholder{color:#d1d1d1}[type=\"radio\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"radio\"]:not(:checked)+span{position:relative;padding-left:35px;cursor:pointer;display:inline-block;height:25px;line-height:25px;font-size:1rem;-webkit-transition:.28s ease;transition:.28s ease;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border-radius:50%}[type=\"radio\"]:not(:checked)+span:before,[type=\"radio\"]:not(:checked)+span:after{border:2px solid #5a5a5a}[type=\"radio\"]:not(:checked)+span:after{-webkit-transform:scale(0);transform:scale(0)}[type=\"checkbox\"]:not(:checked){position:absolute;opacity:0;pointer-events:none}[type=\"checkbox\"]:not(:checked):disabled+span:not(.lever):before{border:none;background-color:rgba(0,0,0,0.42)}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):before{width:0;height:0;border:3px solid transparent;left:6px;top:10px;-webkit-transform:rotateZ(37deg);transform:rotateZ(37deg);-webkit-transform-origin:100% 100%;transform-origin:100% 100%}[type=\"checkbox\"].filled-in:not(:checked)+span:not(.lever):after{height:20px;width:20px;background-color:transparent;border:2px solid #5a5a5a;top:0px;z-index:0}input[type=checkbox]:not(:disabled) ~ .lever:active:before,input[type=checkbox]:not(:disabled).tabbed:focus ~ .lever::before{-webkit-transform:scale(2.4);transform:scale(2.4);background-color:rgba(0,0,0,0.08)}input[type=range].focused:focus:not(.active)::-webkit-slider-thumb{-webkit-box-shadow:0 0 0 10px rgba(38,166,154,0.26);box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-moz-range-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)}input[type=range].focused:focus:not(.active)::-ms-thumb{box-shadow:0 0 0 10px rgba(38,166,154,0.26)} 番组计划 这里将是永远的回忆 window.onload = function(){ videos.forEach(function(video, i){ $('#rootRow').append(` ${video.title} ${video.jp} ${video.status} ${video.title} ${video.jp} 放送时间: ${video.time} ${video.desc} ${video.status} `) }) }"}],"posts":[{"title":"demo","slug":"demo","date":"2021-09-14T05:47:10.000Z","updated":"2021-09-15T03:52:54.510Z","comments":true,"path":"2021/09/14/demo/","link":"","permalink":"2021/09/14/demo/","excerpt":"","text":"WebSocket###简介： 一、什么叫WebSocketWebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。 WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。 在WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。 二、WebSocket到底可以用来干什么？现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒）， 由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显 的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能 只是很小的一部分，显然这样会浪费很多的带宽等资源。 HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。 三、WebSocket 怎么用？浏览器通过 JavaScript 向服务器发出建立 WebSocket 连接的请求，连接建立以后，客户端和服务器端就可 以通过 TCP 连接直接交换数据。 当你获取 Web Socket 连接后，你可以通过 send() 方法来向服务器发送数据，并通过 onmessage 事件来接 收服务器返回的数据。 以下 API 用于创建 WebSocket 对象。 四、代码实现1.客户端代码实现(1) 先带入需要的 **jquery-1.8.3.min.js ** (2) 先判断当前浏览器是否支持 var websocket = null; // 判断当前浏览器是否支持WebSocket if (&#39;WebSocket&#39; in window) &#123; websocket = new WebSocket(&quot;ws://ip:端口号/websocket/可以设置的参数&quot;); &#125; else &#123; alert(&#39;当前浏览器 Not support websocket&#39;) &#125; (3) webSocket 是分为不同事件的，每一种事件都可以做出不同的操作 事件 事件处理程序 描述 open Socket.onopen 连接建立时触发 message Socket.onmessage 客户端接收服务端数据时触发 error Socket.onerror 通信发生错误时触发 close Socket.onclose 连接关闭时触发 //连接成功建立的回调方法 在客户端可以 使用回调 websocket.onopen = function () &#123; &#125; //接收到消息的回调方法 可以将消息展示在当前页面上 websocket.onmessage = function (event) &#123; setMessageInnerHTML(event.data); &#125; //连接发生错误的回调方法 websocket.onerror = function () &#123; setMessageInnerHTML(&quot;发生错误的时候，展示在页面上&quot;); &#125;; //连接关闭的回调方法 websocket.onclose = function () &#123; setMessageInnerHTML(&quot;退出了聊天室&quot;); &#125; //将消息显示在网页上 function setMessageInnerHTML(innerHTML) &#123; document.getElementById(&#39;message&#39;).innerHTML += innerHTML; &#125; (4) JS页面 发送消息的时候，点击发送按钮，请求 SEND 方法 // 按钮的点击触发事件 之后 发送消息 &lt;input id=&quot;text&quot; type=&quot;text&quot;/&gt; &lt;input id=&quot;name&quot;/&gt; &lt;button onclick=&quot;send()&quot;&gt;发送消息&lt;/button&gt; function send() &#123; var message = document.getElementById(&#39;text&#39;).value; var userName = $(&quot;#name&quot;).val(); var dataString = &#123; message: message, userName: userName, type: 1 &#125;; // 这里 SEND 方法之后 服务器那边就会接受到 参数 websocket.send(JSON.stringify(dataString)); &#125; (5) 关闭Socket链接 //** ① 主动关闭WebSocket连接** &lt;button onclick=&quot;closeWebSocket()&quot;&gt;关闭WebSocket连接&lt;/button&gt; function closeWebSocket() &#123; var userName = $(&quot;#name&quot;).val(); var dataString = &#123; userName: userName, message: &quot;退出了聊天室&quot;, type: 4 &#125;; websocket.send(JSON.stringify(dataString)); // 主动 socket 主动关闭 websocket.close(); &#125; // ② 监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接。 // 防止连接还没断开就关闭窗口，server端会抛异常。 window.onbeforeunload = function () &#123; closeWebSocket(); &#125; 完整代码 &lt;html&gt; &lt;head&gt; &lt;title&gt;WebSocket实现页面&lt;/title&gt; &lt;/head&gt; &lt;body&gt; Welcome &lt;br/&gt;&lt;input id=&quot;text&quot; type=&quot;text&quot;/&gt; &lt;button onclick=&quot;send()&quot;&gt;发送消息&lt;/button&gt; &lt;hr/&gt; &lt;button onclick=&quot;closeWebSocket()&quot;&gt;关闭WebSocket连接&lt;/button&gt; &lt;hr/&gt; 当前聊天用户名：&lt;input id=&quot;name&quot;/&gt; 可修改 &lt;br/&gt; &lt;br/&gt; 消息记录区： &lt;br/&gt; &lt;br/&gt; &lt;div id=&quot;message&quot;&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; &lt;script src=&quot;js/jquery-1.8.3.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; var websocket = null; //判断当前浏览器是否支持WebSocket if (&#39;WebSocket&#39; in window) &#123; websocket = new WebSocket(&quot;ws://localhost:8081/websocket/nihao&quot;); &#125; else &#123; alert(&#39;当前浏览器 Not support websocket&#39;) &#125; //连接发生错误的回调方法 websocket.onerror = function () &#123; setMessageInnerHTML(&quot;&#123;\\&quot;code\\&quot;:\\&quot;200\\&quot;,\\&quot;message\\&quot;:\\&quot;发生错误\\&quot;,\\&quot;user\\&quot;:\\&quot;\\&quot;&#125;&quot;); &#125;; //连接成功建立的回调方法 websocket.onopen = function () &#123; &#125; //接收到消息的回调方法 websocket.onmessage = function (event) &#123; setMessageInnerHTML(event.data); &#125; //连接关闭的回调方法 websocket.onclose = function () &#123; var userName = $(&quot;#name&quot;).val(); setMessageInnerHTML(&quot;&#123;\\&quot;code\\&quot;:\\&quot;200\\&quot;,\\&quot;userName\\&quot;:\\&quot;&quot; + userName + &quot;\\&quot;,\\&quot;message\\&quot;:\\&quot;退出了聊天室\\&quot;,\\&quot;type\\&quot;:\\&quot;3\\&quot;&#125;&quot;); &#125; //监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。 window.onbeforeunload = function () &#123; closeWebSocket(); &#125; //将消息显示在网页上 function setMessageInnerHTML(innerHTML) &#123; var jsonObject = eval(&#39;(&#39; + innerHTML + &#39;)&#39;); if (jsonObject[&quot;type&quot;] == 1) &#123; document.getElementById(&#39;message&#39;).innerHTML += jsonObject[&quot;userName&quot;] + &quot; 发送了: &quot; + jsonObject[&quot;message&quot;] + &#39;&lt;br/&gt;&#39;; // + &quot;&lt;img src=&#39;&quot;+jsonObject[&quot;images&quot;]+&quot;&#39; /&gt;&quot; &#125; else if (jsonObject[&quot;type&quot;] == 2) &#123; $(&quot;#name&quot;).val(jsonObject[&quot;userName&quot;]); document.getElementById(&#39;message&#39;).innerHTML += jsonObject[&quot;userName&quot;] + &quot; &quot; + jsonObject[&quot;message&quot;] + &#39;&lt;br/&gt;&#39;; &#125; else if (jsonObject[&quot;type&quot;] == 3 || jsonObject[&quot;type&quot;] == 4) &#123; document.getElementById(&#39;message&#39;).innerHTML += jsonObject[&quot;userName&quot;] + jsonObject[&quot;message&quot;] + &#39;&lt;br/&gt;&#39;; &#125; &#125; //关闭WebSocket连接 function closeWebSocket() &#123; var userName = $(&quot;#name&quot;).val(); var dataString = &#123; userName: userName, message: &quot;退出了聊天室&quot;, type: 4 &#125;; websocket.send(JSON.stringify(dataString)); websocket.close(); &#125; //发送消息 function send() &#123; var message = document.getElementById(&#39;text&#39;).value; var userName = $(&quot;#name&quot;).val(); var dataString = &#123; message: message, userName: userName, type: 1 &#125;; websocket.send(JSON.stringify(dataString)); &#125; &lt;/script&gt; 2.服务端代码实现(1) maven 配置 &lt;dependency&gt; &lt;groupId&gt;javax.websocket&lt;/groupId&gt; &lt;artifactId&gt;javax.websocket-api&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; (2) 类注解 /** * @ServerEndpoint 注解是一个类层次的注解，它的功能主要是将目前的类定义成一个websocket服务器端, * 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端 */ @ServerEndpoint(&quot;/websocket/&#123;roomId&#125;&quot;) // 如果 是Spring 集成webSocket 的话 ，这个类必须要交给 Spring 容器管理， // 所以必须要加上这个注解 @Component (3)代码实现 import com.alibaba.fastjson.JSONObject; import com.student.utils.price.PriceUtil; import com.student.websocket.dto.MessageDto; import org.apache.commons.collections.MapUtils; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Component; import javax.websocket.*; import javax.websocket.server.PathParam; import javax.websocket.server.ServerEndpoint; import java.io.IOException; import java.util.*; import java.util.concurrent.CopyOnWriteArraySet; /** * @ServerEndpoint 注解是一个类层次的注解，它的功能主要是将目前的类定义成一个websocket服务器端, * 注解的值将被用于监听用户连接的终端访问URL地址,客户端可以通过这个URL来连接到WebSocket服务器端 */ @ServerEndpoint(&quot;/websocket/&#123;roomId&#125;&quot;) @Component public class LiveWebSocket &#123; private final Logger LOGGER = LoggerFactory.getLogger(LiveWebSocket.class); // // 这里使用静态，让 service 属于类 // // 这里不能直接使用 @AutoWired 注解。 需要一个set方法 // private static ILiveService iLiveService; // // // 注入的时候，给类的 service 注入 // @Autowired // public void setLiveService(ILiveService iLiveService) &#123; // LiveWebSocket.iLiveService = iLiveService; // &#125; /** * 静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。 真实的连接数 */ private static int onLineCountTrue = 0; /** * 静态变量 ，用来记录 存在 虚拟人数 */ private static int onLineCount = 0; /** * 用来记录每个房间对应的在线人数 */ private static final Map&lt;String,Integer&gt; ROOMS_ONLINE_COUNT = new HashMap&lt;&gt;(); /** * concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。若要实现服务端与单一客户端通信的话，可以使用Map来存放，其中Key可以为用户标识 */ private static final Map&lt;String, CopyOnWriteArraySet&lt;LiveWebSocket&gt;&gt; ROOMS = new HashMap&lt;&gt;(); /** * 与某个客户端的连接会话，需要通过它来给客户端发送数据 */ private Session session; /** * 房间id */ private String roomId; /** * 获取当前房间的在线人数 * @param roomId * @return */ public static Integer getRoomOnLineCount(Integer roomId)&#123; if(roomId == null || MapUtils.isEmpty(ROOMS_ONLINE_COUNT))&#123; return 0; &#125; Integer onLineCount = ROOMS_ONLINE_COUNT.get(String.valueOf(roomId)); return onLineCount == null || onLineCount &lt;= 0 ? 0 : onLineCount; &#125; /** * 连接建立成功调用的方法 * * @param session 可选的参数。session为与某个客户端的连接会话，需要通过它来给客户端发送数据 */ @OnOpen public void onOpen(@PathParam(value = &quot;roomId&quot;) String roomId, Session session) throws Exception &#123; this.session = session; this.roomId = roomId; CopyOnWriteArraySet&lt;LiveWebSocket&gt; friends = ROOMS.get(roomId); Integer onLineCount = ROOMS_ONLINE_COUNT.get(roomId); if (friends == null) &#123; synchronized (ROOMS) &#123; if (!ROOMS.containsKey(roomId)) &#123; friends = new CopyOnWriteArraySet&lt;&gt;(); ROOMS.put(roomId, friends); addOnlineCount(); // 记录当前房间的在线人数 onLineCount = getOnlineCount(); ROOMS_ONLINE_COUNT.put(roomId,onLineCount); LOGGER.info(&quot;有新的房间加入哦~ 名称为：&quot; + roomId); &#125; &#125; &#125;else&#123; addOnlineCount(); LOGGER.info(&quot;房间名称为：&quot; + roomId + &quot;，有一连接加入！当前在线人数为：&quot; + getOnlineCount()); &#125; friends.add(this); MessageDto messageDto = new MessageDto(); messageDto.setResultMessageTypeCode(&quot;10000000000000000000001&quot;); updateOnLineCount(roomId); messageDto.setMessage(String.valueOf(onLineCount)); messageDto.setRoomId(PriceUtil.getIntegerValue(roomId)); onMessage(getMessageJSON(messageDto),session); &#125; /** * 修改当前在线人数 * @param roomId */ private synchronized void updateOnLineCount(@PathParam(&quot;roomId&quot;) String roomId) &#123; onLineCount = 0;//iLiveService.getLiveRoomNumCount(PriceUtil.getIntegerValue(roomId)) + getOnlineCount(); synchronized (ROOMS_ONLINE_COUNT)&#123; ROOMS_ONLINE_COUNT.put(roomId,onLineCount); &#125; &#125; /** * 连接关闭调用的方法 */ @OnClose public void onClose() &#123; CopyOnWriteArraySet&lt;LiveWebSocket&gt; friends = ROOMS.get(roomId); if (friends != null) &#123; friends.remove(this); // 在线数减1 subOnlineCount(); MessageDto messageDto = new MessageDto(); updateOnLineCount(roomId); messageDto.setMessage(String.valueOf(onLineCount)); messageDto.setRoomId(PriceUtil.getIntegerValue(roomId)); messageDto.setResultMessageTypeCode(&quot;10000000000000000000001&quot;); onMessage(getMessageJSON(messageDto),session); LOGGER.info(&quot;房间名称为：&quot; + roomId + &quot;，有一连接关闭！当前在线人数为：&quot; + getOnlineCount()); &#125; &#125; /** * 获取JSON对象 * @param messageDto * @return */ private String getMessageJSON(MessageDto messageDto) &#123; return JSONObject.toJSONString(messageDto); &#125; /** * 收到客户端消息后调用的方法 * * @param message 客户端发送过来的消息 * @param session 可选的参数 */ @OnMessage public void onMessage(String message, Session session) &#123; CopyOnWriteArraySet&lt;LiveWebSocket&gt; friends = ROOMS.get(roomId); if (friends != null) &#123; try &#123; for (LiveWebSocket item : friends) &#123; item.sendMessage(message); &#125; &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; /** * 这个方法与上面几个方法不一样。没有用注解，是根据自己需要添加的方法。 * * @param message * @throws IOException */ public void sendMessage(String message) throws IOException &#123; this.session.getBasicRemote().sendText(message); &#125; /** * 发生错误时调用 * * @param session * @param error */ @OnError public void onError(Session session, Throwable error) &#123; System.out.println(&quot;发生错误&quot;); error.printStackTrace(); &#125; private static synchronized int getOnlineCount() &#123; return onLineCountTrue; &#125; private static synchronized void addOnlineCount() &#123; LiveWebSocket.onLineCountTrue++; &#125; private static synchronized void subOnlineCount() &#123; LiveWebSocket.onLineCountTrue = Math.max(LiveWebSocket.onLineCountTrue - 1, 0); &#125; &#125; 五、项目部署1.在项目部署到服务器上的时候，如果前端服务器我们使用 nginx 代理的话 ，会出现 404 的报错 只需要在监听80,443端口的时候 截断 拦截请求名 加上 转发就可以了 。 location ^~ /websocket &#123; proxy_pass http://127.0.0.1:端口/websocket/; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &#39;upgrade&#39;; &#125;","categories":[{"name":"技术","slug":"技术","permalink":"categories/技术/"}],"tags":[],"author":"small_baozi"},{"title":"Hexo-Theme-Sakura","slug":"Hexo-Theme-Sakura","date":"2018-12-12T14:16:01.000Z","updated":"2020-03-16T10:41:30.000Z","comments":true,"path":"2018/12/12/Hexo-Theme-Sakura/","link":"","permalink":"2018/12/12/Hexo-Theme-Sakura/","excerpt":"","text":"hexo-theme-sakura主题 English document 基于WordPress主题Sakura修改成Hexo的主题。 demo预览 正在开发中…… 交流群若你是使用者，加群QQ: 801511924 若你是创作者，加群QQ: 194472590 主题特性 首页大屏视频 首页随机封面 图片懒加载 valine评论 fancy-box相册 pjax支持，音乐不间断 aplayer音乐播放器 多级导航菜单（按现在大部分hexo主题来说，这也算是个特性了） 赞赏作者如果喜欢hexo-theme-sakura主题，可以考虑资助一下哦~非常感激！ paypal | Alipay 支付宝 | WeChat Pay 微信支付 未完善的使用教程那啥？老实说我目前也不是很有条理233333333~ 1、主题下载安装hexo-theme-sakura建议下载压缩包格式，因为除了主题内容还有些source的配置对新手来说比较太麻烦，直接下载解压就省去这些麻烦咯。 下载好后解压到博客根目录（不是主题目录哦，重复的选择替换）。接着在命令行（cmd、bash）运行npm i安装依赖。 2、主题配置博客根目录下的_config配置站点 # Site title: 你的站点名 subtitle: description: 站点简介 keywords: author: 作者名 language: zh-cn timezone: 部署 deploy: type: git repo: github: 你的github仓库地址 # coding: 你的coding仓库地址 branch: master 备份 （使用hexo b发布备份到远程仓库） backup: type: git message: backup my blog of https://honjun.github.io/ repository: # 你的github仓库地址,备份分支名 （建议新建backup分支） github: https://github.com/honjun/honjun.github.io.git,backup # coding: https://git.coding.net/hojun/hojun.git,backup 主题目录下的_config配置其中标明【改】的是需要修改部门，标明【选】是可改可不改，标明【非】是不用改的部分 # site name # 站点名 【改】 prefixName: さくら荘その siteName: hojun # favicon and site master avatar # 站点的favicon和头像 输入图片路径（下面的配置是都是cdn的相对路径，没有cdn请填写完整路径，建议使用jsdeliver搭建一个cdn啦，先去下载我的cdn替换下图片就行了，简单方便~）【改】 favicon: /images/favicon.ico avatar: /img/custom/avatar.jpg # 站点url 【改】 url: https://sakura.hojun.cn # 站点介绍（或者说是个人签名）【改】 description: Live your life with passion! With some drive! # 站点cdn，没有就为空 【改】 若是cdn为空，一些图片地址就要填完整地址了，比如之前avatar就要填https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/custom/avatar.jpg cdn: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6 # 开启pjax 【选】 pjax: 1 # 站点首页的公告信息 【改】 notice: hexo-Sakura主题已经开源，目前正在开发中... # 懒加载的加载中图片 【选】 lazyloadImg: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/loader/orange.progress-bar-stripe-loader.svg # 站点菜单配置 【选】 menus: 首页: &#123; path: /, fa: fa-fort-awesome faa-shake &#125; 归档: &#123; path: /archives, fa: fa-archive faa-shake, submenus: &#123; 技术: &#123;path: /categories/技术/, fa: fa-code &#125;, 生活: &#123;path: /categories/生活/, fa: fa-file-text-o &#125;, 资源: &#123;path: /categories/资源/, fa: fa-cloud-download &#125;, 随想: &#123;path: /categories/随想/, fa: fa-commenting-o &#125;, 转载: &#123;path: /categories/转载/, fa: fa-book &#125; &#125; &#125; 清单: &#123; path: javascript:;, fa: fa-list-ul faa-vertical, submenus: &#123; 书单: &#123;path: /tags/悦读/, fa: fa-th-list faa-bounce &#125;, 番组: &#123;path: /bangumi/, fa: fa-film faa-vertical &#125;, 歌单: &#123;path: /music/, fa: fa-headphones &#125;, 图集: &#123;path: /tags/图集/, fa: fa-photo &#125; &#125; &#125; 留言板: &#123; path: /comment/, fa: fa-pencil-square-o faa-tada &#125; 友人帐: &#123; path: /links/, fa: fa-link faa-shake &#125; 赞赏: &#123; path: /donate/, fa: fa-heart faa-pulse &#125; 关于: &#123; path: /, fa: fa-leaf faa-wrench , submenus: &#123; 我？: &#123;path: /about/, fa: fa-meetup&#125;, 主题: &#123;path: /theme-sakura/, fa: iconfont icon-sakura &#125;, Lab: &#123;path: /lab/, fa: fa-cogs &#125;, &#125; &#125; 客户端: &#123; path: /client/, fa: fa-android faa-vertical &#125; RSS: &#123; path: /atom.xml, fa: fa-rss faa-pulse &#125; # Home page sort type: -1: newer first，1: older first. 【非】 homePageSortType: -1 # Home page article shown number) 【非】 homeArticleShown: 10 # 背景图片 【选】 bgn: 8 # startdash面板 url, title, desc img 【改】 startdash: - &#123;url: /theme-sakura/, title: Sakura, desc: 本站 hexo 主题, img: /img/startdash/sakura.md.png&#125; - &#123;url: http://space.bilibili.com/271849279, title: Bilibili, desc: 博主的b站视频, img: /img/startdash/bilibili.jpg&#125; - &#123;url: /, title: hojun的万事屋, desc: 技术服务, img: /img/startdash/wangshiwu.jpg&#125; # your site build time or founded date # 你的站点建立日期 【改】 siteBuildingTime: 07/17/2018 # 社交按钮(social) url, img PC端配置 【改】 social: github: &#123;url: http://github.com/honjun, img: /img/social/github.png&#125; sina: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/sina.png&#125; wangyiyun: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/wangyiyun.png&#125; zhihu: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/zhihu.png&#125; email: &#123;url: http://weibo.com/mashirozx?is_all=1, img: /img/social/email.svg&#125; wechat: &#123;url: /#, qrcode: /img/custom/wechat.jpg, img: /img/social/wechat.png&#125; # 社交按钮(msocial) url, img 移动端配置 【改】 msocial: github: &#123;url: http://github.com/honjun, fa: fa-github, color: 333&#125; weibo: &#123;url: http://weibo.com/mashirozx?is_all=1, fa: fa-weibo, color: dd4b39&#125; qq: &#123;url: https://wpa.qq.com/msgrd?v=3&amp;uin=954655431&amp;site=qq&amp;menu=yes, fa: fa-qq, color: 25c6fe&#125; # 赞赏二维码（其中wechatSQ是赞赏单页面的赞赏码图片）【改】 donate: alipay: /img/custom/donate/AliPayQR.jpg wechat: /img/custom/donate/WeChanQR.jpg wechatSQ: /img/custom/donate/WeChanSQ.jpg # 首页视频地址为https://cdn.jsdelivr.net/gh/honjun/hojun@1.2/Unbroken.mp4，配置如下 【改】 movies: url: https://cdn.jsdelivr.net/gh/honjun/hojun@1.2 # 多个视频用逗号隔开，随机获取。支持的格式目前已知MP4,Flv。其他的可以试下，不保证有用 name: Unbroken.mp4 # 左下角aplayer播放器配置 主要改id和server这两项，修改详见[aplayer文档] 【改】 aplayer: id: 2660651585 server: netease type: playlist fixed: true mini: false autoplay: false loop: all order: random preload: auto volume: 0.7 mutex: true # Valine评论配置【改】 valine: true v_appId: GyC3NzMvd0hT9Yyd2hYIC0MN-gzGzoHsz v_appKey: mgOpfzbkHYqU92CV4IDlAUHQ 分类页和标签页配置分类页 标签页 配置项在\\themes\\Sakura\\languages\\zh-cn.yml里。新增一个分类或标签最好加下哦，当然嫌麻烦可以直接使用一张默认图片（可以改主题或者直接把404图片替换下，征求下意见要不要给这个在配置文件中加个开关，可以issue或群里提出来），现在是没设置的话会使用那种倒立小狗404哦。 #category # 按分类名创建 技术: #中文标题 zh: 野生技术协会 # 英文标题 en: Geek – Only for Love # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/coding.jpg 生活: zh: 生活 en: live img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/writing.jpg #tag # 标签名即是标题 悦读: # 封面图片 img: https://cdn.jsdelivr.net/gh/honjun/cdn@1.6/img/banner/reading.jpg 单页面封面配置如留言板页面页面，位于source下的comment下，打开index.md如下： --- title: comment date: 2018-12-20 23:13:48 keywords: 留言板 description: comments: true # 在这里配置单页面头部图片，自定义替换哦~ photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/comment.jpg --- 单页面配置番组计划页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: bangumi title: bangumi comments: false date: 2019-02-10 21:32:48 keywords: description: bangumis: # 番组图片 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg # 番组名 title: 朝花夕誓——于离别之朝束起约定之花 # 追番状态 （追番ing/已追完） status: 已追完 # 追番进度 progress: 100 # 番剧日文名称 jp: さよならの朝に約束の花をかざろう # 放送时间 time: 放送时间: 2018-02-24 SUN. # 番剧介绍 desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 - img: https://lain.bgm.tv/pic/cover/l/0e/1e/218971_2y351.jpg title: 朝花夕誓——于离别之朝束起约定之花 status: 已追完 progress: 50 jp: さよならの朝に約束の花をかざろう time: 放送时间: 2018-02-24 SUN. desc: 住在远离尘嚣的土地，一边将每天的事情编织成名为希比欧的布，一边静静生活的伊欧夫人民。在15岁左右外表就停止成长，拥有数百年寿命的他们，被称为“离别的一族”，并被视为活着的传说。没有双亲的伊欧夫少女玛奇亚，过着被伙伴包围的平稳日子，却总感觉“孤身一人”。他们的这种日常，一瞬间就崩溃消失。追求伊欧夫的长寿之血，梅萨蒂军乘坐着名为雷纳特的古代兽发动了进攻。在绝望与混乱之中，伊欧夫的第一美女蕾莉亚被梅萨蒂带走，而玛奇亚暗恋的少年克里姆也失踪了。玛奇亚虽然总算逃脱了，却失去了伙伴和归去之地……。 --- 友链页 （请直接在下载后的文件中改，下面的添加了注释可能会有些影响） --- layout: links title: links # 创建日期，可以改下 date: 2018-12-19 23:11:06 # 图片上的标题，自定义修改 keywords: 友人帐 description: # true/false 开启/关闭评论 comments: true # 页面头部图片，自定义修改 photos: https://cdn.jsdelivr.net/gh/honjun/cdn@1.4/img/banner/links.jpg # 友链配置 links: # 类型分组 - group: 个人项目 # 类型简介 desc: 充分说明这家伙是条咸鱼 &lt; (￣︶￣)&gt; items: # 友链链接 - url: https://shino.cc/fgvf # 友链头像 img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg # 友链站点名 name: Google # 友链介绍 下面雷同 desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 # 类型分组... - group: 小伙伴们 desc: 欢迎交换友链 ꉂ(ˊᗜˋ) items: - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 - url: https://shino.cc/fgvf img: https://cloud.moezx.cc/Picture/svg/landscape/fields.svg name: Google desc: Google 镜像 --- 写文章配置主题集成了个人插件hexo-tag-bili和hexo-tag-fancybox_img。其中hexo-tag-bili用来在文章或单页面中插入B站外链视频，使用语法如下： &#123;% bili video_id [page] %&#125; 详细使用教程详见hexo-tag-bili。 hexo-tag-fancybox_img用来在文章或单页面中图片，使用语法如下： &#123;% fb_img src [caption] %&#125; 详细使用教程详见hexo-tag-fancybox_img 还有啥，一时想不起来……To be continued…","categories":[{"name":"技术","slug":"技术","permalink":"categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"tags/web/"},{"name":"悦读","slug":"悦读","permalink":"tags/悦读/"}],"author":"hojun"}],"categories":[{"name":"技术","slug":"技术","permalink":"categories/技术/"}],"tags":[{"name":"web","slug":"web","permalink":"tags/web/"},{"name":"悦读","slug":"悦读","permalink":"tags/悦读/"}]}